"""
Django settings for pardcards project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

from django.conf.global_settings import STATICFILES_FINDERS


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o5d=%3$*vr3xyxg7$7vcxs=ry+xckvhxv=+9kq3+l)e0^e3'

PRODUCTION = 'DJANGO_PRODUCTION' in os.environ
DEBUG = 'DJANGO_PRODUCTION' not in os.environ

ALLOWED_HOSTS = [host for host in os.environ.get('ALLOWED_HOSTS', '').split(',') if host]

# --------------------------------------------------------------------------------------------------
# Core Django Config (Apps, Middleware, Templates, WSGI, Databases)
# --------------------------------------------------------------------------------------------------
INSTALLED_APPS = [
    # django core
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dvfragments',
    'dvftestapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dvftestsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pardcards.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
} if DEBUG else {}
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'USER': 'pardcards',
#         'NAME': 'pardcards',
#         'HOST': 'localhost',
#         'PORT': '',
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#     }
# }

# --------------------------------------------------------------------------------------------------
# Auth and Login
#
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
# --------------------------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# AUTH_USER_MODEL = 'admin.User'

LOGIN_URL = '/'
LOGIN_REDIRECT_URL = '/'


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# --------------------------------------------------------------------------------------------------
# Logging
# --------------------------------------------------------------------------------------------------
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
LOG_FORMATTER = os.environ.get('LOG_FORMATTER', 'simple')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {'format': '%(levelname)s %(message)s'},
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': LOG_FORMATTER,
        },
        'null': {'class': 'logging.NullHandler',},
    },
    'root': {
        'level': LOG_LEVEL,
        'handlers': ['console'],
        'propagate': False,
    },
    'loggers': {
        'factory': {'level': 'WARNING'},
        'django.db.backends': {'level': 'DEBUG'},
        'django': {'level': 'DEBUG'},
    },
}

# --------------------------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# --------------------------------------------------------------------------------------------------
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = 'static_root'
MEDIA_ROOT = 'media'
